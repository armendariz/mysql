

### PLAN OF ATTACK
# ) How to get data into MySQL
# ) How to ensure the data is stored correctly (using the right field types)
# ) How to check if the data came in as expected using summary numbers (sums, counts)
# ) How to use look-up tables to help summarize the data
# ) How to index fields for faster join performance
# ) How to ensure we're getting good information and not misinformation from look-up tables (one to many relationship, locate orphans)
# ) Dealing with dates (number or date format?)
# ) Dealing with strings (functions to parse strings)


### LOG ON
# LOAD DATA LOCAL INFILE works only if your server and your client both have been configured to permit it. .
mysql -u django -p  --local-infile=1

### THERE ARE SYSTEM SETTINGS ON THE MYSQL SERVER. KNOW THAT THEY ARE THERE AND YOU MIGHT NEED TO ADJUST THEM
SHOW GLOBAL VARIABLES LIKE 'local_infile';
SET GLOBAL local_infile = 'ON';
SHOW GLOBAL VARIABLES LIKE 'local_infile';

### CREATE A HOME FOR OUR DATA
CREATE DATABASE nicar_mysql;
USE nicar_mysql;

### LET'S MAKE A TABLE
# auto generated by csvkit
# https://csvkit.readthedocs.org/en/0.9.0/
# $ csvsql -i mysql ca_fy09q3.csv
CREATE TABLE ca_fy09q3 (
	award_key INTEGER NOT NULL, 
	recipient_role VARCHAR(2) NOT NULL, 
	version_flag BOOL NOT NULL, 
	status VARCHAR(1) NOT NULL, 
	active_flag TIME NOT NULL, 
	agency_reviewed_flag BOOL, 
	prime_reviewed_flag BOOL, 
	correction_flag BOOL, 
	funding_agency_cd VARCHAR(4), 
	funding_agency_name VARCHAR(62), 
	awarding_agency_cd VARCHAR(4), 
	awarding_agency_name VARCHAR(67), 
	funding_tas VARCHAR(7), 
	tas_sub_account VARCHAR(4), 
	fiscal_year INTEGER NOT NULL, 
	fiscal_qtr INTEGER NOT NULL, 
	recipient_duns_number VARCHAR(9) NOT NULL, 
	sub_duns_number VARCHAR(9), 
	recipient_name VARCHAR(87), 
	recipient_zip_code VARCHAR(9), 
	recipient_state VARCHAR(4), 
	award_number VARCHAR(41) NOT NULL, 
	order_number VARCHAR(43), 
	sub_award_number VARCHAR(52), 
	cfda_number FLOAT, 
	recipient_cong_dist VARCHAR(4), 
	recipient_account_number VARCHAR(71), 
	final_report BOOL, 
	input_type VARCHAR(4), 
	input_version INTEGER, 
	award_type VARCHAR(1) NOT NULL, 
	award_date DATE, 
	award_description VARCHAR(4000), 
	award_amount FLOAT NOT NULL, 
	project_name VARCHAR(255), 
	project_description VARCHAR(2000), 
	project_status VARCHAR(23), 
	job_creation VARCHAR(3943), 
	number_of_jobs FLOAT, 
	total_fed_arra_received FLOAT, 
	total_fed_arra_exp FLOAT, 
	total_infrastructure_exp FLOAT, 
	infrastrucutre_rationale VARCHAR(2441), 
	pop_st_address_1 VARCHAR(55), 
	pop_st_address_2 VARCHAR(55), 
	pop_state_cd VARCHAR(4), 
	pop_country_cd VARCHAR(4), 
	pop_city VARCHAR(30), 
	pop_postal_cd VARCHAR(9), 
	pop_cong_dist VARCHAR(4), 
	prime_recipient_highcomp_rpt_app_flag BOOL, 
	recipient_officer_1 VARCHAR(53), 
	recipient_officer_2 VARCHAR(52), 
	recipient_officer_3 VARCHAR(44), 
	recipient_officer_4 VARCHAR(46), 
	recipient_officer_5 VARCHAR(43), 
	recipient_officer_totalcomp_1 FLOAT, 
	recipient_officer_totalcomp_2 FLOAT, 
	recipient_officer_totalcomp_3 FLOAT, 
	recipient_officer_totalcomp_4 FLOAT, 
	recipient_officer_totalcomp_5 FLOAT, 
	total_number_small_subaward INTEGER, 
	total_amount_small_subaward FLOAT, 
	total_number_small_subaward_indiv INTEGER, 
	total_amount_small_subaward_indiv FLOAT, 
	total_number_small_subaward_vend INTEGER, 
	total_amount_small_subaward_vend FLOAT, 
	govt_contract_office_cd VARCHAR(6), 
	govt_office_name VARCHAR(32), 
	infrastructure_contact_nm VARCHAR(71), 
	infrastructure_contact_email VARCHAR(42), 
	infrastructure_contact_phone VARCHAR(14), 
	infrastructure_contact_phone_ext VARCHAR(10), 
	infrastructure_st_address_1 VARCHAR(52), 
	infrastructure_st_address_2 VARCHAR(52), 
	infrastructure_st_address_3 VARCHAR(27), 
	infrastructure_city VARCHAR(22), 
	infrastructure_state_cd VARCHAR(4), 
	infrastructure_postal_cd VARCHAR(9), 
	activity_code VARCHAR(10), 
	project_activity_desc VARCHAR(118), 
	activity_code_2 VARCHAR(10), 
	activity_code_3 VARCHAR(10), 
	activity_code_4 VARCHAR(10), 
	activity_code_5 VARCHAR(10), 
	activity_code_6 VARCHAR(10), 
	activity_code_7 VARCHAR(10), 
	activity_code_8 VARCHAR(10), 
	activity_code_9 VARCHAR(10), 
	activity_code_10 VARCHAR(8), 
	late_submission_flag BOOL, 
	late_submission_justification VARCHAR(1604), 
	tmsp_last_updt DATETIME NOT NULL, 
	tmsp_created DATETIME NOT NULL, 
	CHECK (version_flag IN (0, 1)), 
	CHECK (agency_reviewed_flag IN (0, 1)), 
	CHECK (prime_reviewed_flag IN (0, 1)), 
	CHECK (correction_flag IN (0, 1)), 
	CHECK (final_report IN (0, 1)), 
	CHECK (prime_recipient_highcomp_rpt_app_flag IN (0, 1)), 
	CHECK (late_submission_flag IN (0, 1))
);


### TAKE A PEEK
SHOW TABLES;

### LOAD US UP SOME DATA
LOAD DATA LOCAL INFILE 'I:\\nicar_2015_mysql\\ca_fy09q3.csv'
INTO TABLE ca_fy09q3
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';


### CHECK IT OUT
SELECT *
FROM ca_fy09q3
LIMIT 2;


### WHOAH THATÃ•S UGLY! SO CHECK THIS OUT
# but look at the award_description, project_description & job_creation fields closely
# award_amount? 
# Field types are important things
SELECT * FROM ca_fy09q3 LIMIT 2 \G

### MAC CLEAR SCREEN
control + L

### GET RID OF THE HEADER ROW
# Look before you leap
SELECT *
FROM ca_fy09q3
WHERE award_key='award_key' \G


### NOW THAT YOU SEE WHAT YOU WANT TO DELETE, NUKE IT
DELETE
FROM ca_fy09q3
WHERE award_key='award_key';


### CHECK AWARD AMOUNT TOTAL
# First, look before you leap
SELECT SUM( award_amount )
FROM ca_fy09q3;


### CHECK AWARD AMOUNT TOTAL BY RECIPIENT ROLE (PRIME, SUB, SUB VENDOR, PRIME VENDOR)
SELECT recipient_role, SUM( award_amount )
FROM ca_fy09q3
GROUP BY recipient_role;


### LETS LOOK AT THIS A BIT CLOSER
# Look for an award with a lot of recipient roles
SELECT award_key, COUNT(*)
FROM
(
SELECT award_key, recipient_role
FROM ca_fy09q3
GROUP BY 1,2 
) w
GROUP BY award_key
ORDER BY COUNT(*);

# grab a good one
# and see all the different types of roles associated with one award
SELECT award_key, award_type, recipient_role, recipient_name, award_amount
FROM ca_fy09q3
WHERE award_key='30598'
ORDER BY award_key, recipient_role \G


### THOSE RECIPIENT ABBREVIATIONS MEAN NOTHING TO ME SHOW ME A TRANSLATION
SELECT 
CASE
WHEN recipient_role='P' THEN 'Prime Recipient'
WHEN recipient_role='S' THEN 'Sub-Recipient'
WHEN recipient_role='PV' THEN 'Prime Vendor'
WHEN recipient_role='SV' THEN 'Sub-Recipient Vendor'
ELSE 'No idea'
END, SUM( award_amount )
FROM ca_fy09q3
GROUP BY 1;


### LET'S ADD A LOOKUP TABLE
# catalog of federal domestic assistance programs
CREATE TABLE lk_cfda (
	number FLOAT NOT NULL, 
	description VARCHAR(185) NOT NULL
);

### LOAD'ER UP
LOAD DATA LOCAL INFILE 'I:\\nicar_2015_mysql\\lk_cfda.txt'
INTO TABLE lk_cfda
FIELDS TERMINATED BY '|'
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

### USE THE CFDA Lookup Table
SELECT number, description
FROM lk_cfda \G


### ADD COLUMN BY HAND
ALTER TABLE lk_cfda ADD COLUMN intCFDA INT;


### GET THE PERIOD OUT OF THE CFDA NUMBER
# Look before you leap
SELECT number, REPLACE(number, '.', '')
FROM lk_cfda;

# add the new cfda number to the new column
UPDATE lk_cfda
SET intCFDA= REPLACE(number, '.', '');


### CHECK FOR DUPES (always) 
SELECT number, COUNT(*)
FROM lk_cfda
GROUP BY number 
ORDER BY COUNT(*) DESC;

SELECT intCFDA, COUNT(*)
FROM lk_cfda
GROUP BY number 
ORDER BY COUNT(*) DESC;


### ADD COLUMN TO THE MAIN TABLE TO HOOK UP LOOK UP TABLE TO
ALTER TABLE ca_fy09q3 ADD COLUMN intCFDA INT;


### LOOK AT THE MAIN TABLE 
SELECT award_type, recipient_role, cfda_number
FROM ca_fy09q3
WHERE recipient_role='P' AND award_type='G' 
ORDER BY cfda_number;


### UPDATE THE CFDA_NUMBER IN THE MAIN TABLE TO JOIN CORRECTLY TO THE MAIN TABLE
# Look before you leap
SELECT cfda_number, REPLACE(cfda_number, '.', '')
FROM ca_fy09q3;


# DO IT
UPDATE ca_fy09q3
SET intCFDA=REPLACE(cfda_number, '.', '');


### JOIN THE LOOK-UP TABLE TO THE MAIN TABLE
# IMPORTANT: you need to specify table_name.field_name otherwise the computer won't know what intCFDA field you mean. The one in lk_cfda or the one in ca_fy09q3_by_hand
SELECT lk_cfda.number, 
	lk_cfda.description, 
	lk_cfda.intCFDA, 
	ca_fy09q3.intCFDA
FROM lk_cfda INNER JOIN ca_fy09q3 ON lk_cfda.intCFDA = ca_fy09q3.intCFDA;


### JOINS CAN OFTEN CAUSE QUERIES TO CRAWL ALONG AT A GLACIAL PACE
### INDEX THE FIELDS YOU ARE JOINING IN EACH TABLE FOR FASTER PERFORMANCE
### THIS IS OFTEN A NECESSITY WHEN USING MYSQL
ALTER TABLE `ca_fy09q3` ADD INDEX (cfda_number);
ALTER TABLE `lk_cfda` ADD INDEX (number);


### HOW MANY CFDA numbers are actually in the data?
SELECT cfda_number
FROM ca_fy09q3
WHERE cfda_number IS NOT NULL AND cfda_number<>''



### THE JOIN IS WORKING WHAT ELSE IS THERE?
# Now that we know there are only 4,783 unique CFDA numbers in the data, we know that we're good to go on our join, but what's all that other data?
SELECT award_type, COUNT(*)
FROM ca_fy09q3
GROUP BY award_type
ORDER BY COUNT(*) DESC;


### Contracts and Loans account for a bit, what else?
SELECT
CASE
WHEN award_type='G' THEN 'Grant'
WHEN award_type='C' THEN 'Contract'
WHEN award_type='L' THEN 'Loan'
ELSE 'No idea' END AS award_type,
COUNT(*)
FROM ca_fy09q3
GROUP BY award_type
ORDER BY COUNT(*) DESC;


### The Different Recipient Roles
SELECT award_type, recipient_role, COUNT(*)
FROM ca_fy09q3
WHERE award_type='G'
GROUP BY award_type, recipient_role
ORDER BY COUNT(*) DESC;


### Looks like only the P or Prime Recipients are reporting the CFDA Number on grants and there 4,769 if them...so where are the 14 extra rows in the join coming from?
SELECT award_type, recipient_role, COUNT(*)
FROM ca_fy09q3
WHERE award_type='G' AND cfda_number IS NOT NULL AND cfda_number<>''
GROUP BY award_type, recipient_role
ORDER BY COUNT(*) DESC;


### Looks like there are 14 Loans that also have an associated CFDA Number
SELECT award_type, recipient_role, COUNT(*)
FROM ca_fy09q3 INNER JOIN lk_cfda ON ca_fy09q3.intCFDA = lk_cfda.intCFDA
GROUP BY award_type, recipient_role
ORDER BY COUNT(*) DESC;


### Alright, enough random play. You get the idea. Explore on. Summarize away. Count, Sum, AVG, Join, explore.

### Now we look at a few useful functions

### SUBSTRING_INDEX() -- not useful here, but you can see the power of being able to isolate the string based on a character in it
SELECT ca_fy09q3.recipient_officer_1, SUBSTRING_INDEX(recipient_officer_1, ',', 1)
FROM ca_fy09q3
WHERE recipient_officer_1 IS NOT NULL AND recipient_officer_1<>'' AND recipient_officer_1 LIKE '%,%';


###  string to date
SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');

SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');

